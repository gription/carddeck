#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#&    ~\.golangci.yaml - GoLang multi-stage megalinter config file __.:! Shazam !:.__
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#= https://golangci-lint.run/usage/configuration/
#= Full Local Reference: .golangci.reference.yml

#% Samples/Examples
#, Oleg Kovalov's Blog - Go linters configuration, the right version.
#= https://olegk.dev/go-linters-configuration-the-right-version
# , cristaloleg Gist- An opinionated golangci-lint config (right versionâ„¢)
#= https://gist.github.com/cristaloleg/dc29ca0ef2fb554de28d94c3c6f6dc88

#| - run
#| - linters - enable/disable
#| - linters-settings
#| - output
#| - issues

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#* Config search paths from app: |> golangci-lint -v path config
#~ Upstream + $home = [ ./ C:\\dev\\go\\src\\carddeck C:\\dev\\go\\src C:\\dev\\go C:\\dev C:\\ C:\\Users\\andy ]
#* Linters List from app: |> golangci-lint help linters
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          RUN - Options for analysis running.
run:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  timeout: 5m                           #. Timeout for analysis, e.g. 30s, 5m. If the value is lower or equal to 0, the timeout is disabled. Default: 1m
  allow-parallel-runners: true          #. Allow multiple parallel golangci-lint instances running. If false, golangci-lint acquires file lock on start. Default: false
  allow-serial-runners: true            #. Allow multiple golangci-lint instances running, but serialize them around a lock. If false, golangci-lint exits with an error if it fails to acquire file lock on start. Default: false
  issues-exit-code: 2                   #. Exit code when at least one issue was found. Default: 1
  tests: false                          #. Include test files or not. Default: true

  #. In most cases this can be empty but there is a popular pattern to keep integration tests under this tag. Such tests often require
  #. additional setups like Postgres, Redis etc and are run separately. (to be honest I don't find this useful but I have such tags)
  build-tags:                           #. List of build tags, all linters use it. Default: []
    - integration

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  #. If invoked with -mod=readonly, the go command is disallowed from the implicit automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor directory holds the correct copies of dependencies and ignores the dependency descriptions in go.mod.
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

  #. Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
#   go: '1.19'
  go: ""                                #. Keep this empty to use the Go version from the go.mod file.

  #, Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 8

#========
severity:
#========

  #. Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  #= - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  #= - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  #= - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #= - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  #|  `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default-severity: error

  #. If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: true

  #. When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules except you are allowed to specify one matcher per severity rule.
  #
  #|  `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  rules:
    - linters:
        - dupl
      severity: info

# `--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.
# ``   \:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\
# ``    `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'
#
#&          LINTERS
linters:
# `--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.      .--.
# ``   \:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\:;:;:;:;.\
# ``    `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'      `--'
  #= https://golangci-lint.run/usage/linters/

  enable-all: false             #. Enable all available linters. (Establish default?) - Default: false
  fast: false                   #. Set to true runs only fast linters. - Good option for 'lint on save', pre-commit hook or CI.

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          Linters Enabled
  enable:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#% OOB -- 'Enabled by Default' Linters:
    - typecheck                     #. Cannot be disabled - Not a linter (no analysis) it's just a way to identify, parse, and display compiling errors (produced by the types.Checker) and some linter errors.
    - errcheck                      #, errcheck: Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.  --  Forces to not skip error check. - check that all errors are handled
    - gosimple                      #, gosimple: Linter for Go source code that specializes in simplifying code. [auto-fix]  --  check if code can be simplified e.g. !condition instead of condition == false
    - govet                         #, govet: Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [auto-fix]  --  check incorrect printf format-argument calls - invoked by the goland internally?
    - ineffassign                   #, ineffassign: Detects when assignments to existing variables are not used. [fast]  --  check unused assignments to existing vars - Detects when assignments to existing variables are not used
    - staticcheck                   #, staticcheck: It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint. [auto-fix]  --  I have found that it's not the same as staticcheck binary :\
    - unused                        #, unused: Checks Go code for unused constants, variables, functions and types.  --  check unused constants, functions, types, vars and struct fields - Must have. Finds unused declarations.

#, Explicitly identified as 'fast'
#% Substantial Linters
    - gci                           #| gci: Checks if code and import statements are formatted, it makes import statements always deterministic. [fast, auto-fix]  --  Imports order.
    - gofmt                         #| gofmt: Checks if the code is formatted according to 'gofmt' command. [fast, auto-fix]
    - gofumpt                       #| gofumpt: Checks if code and import statements are formatted, with additional rules. [fast, auto-fix]  --  check against the coding standard rules of https://github.com/mvdan/gofumpt (an extension of gofmt) - kudos to Daniel Marti
    - goimports                     #| goimports: Checks if the code and import statements are formatted according to the 'goimports' command. [fast, auto-fix]
    - revive                        #| revive: Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [auto-fix] - HUGE CONFIG BENEATH linters-settings
    - tagalign                      #| tagalign: Check that struct tags are well aligned. [fast, auto-fix] - and ordered - see linters-settings  -- check struct tag alignment and order
#% Linters
    - asciicheck                    #| asciicheck: Checks that all code identifiers does not have non-ASCII symbols in the name. [fast]  --  check for non-ascii chars in identifiers (vars, functions, types, ...)  -  Symbol `âˆ†` instead of `delta` looks cool but no thanks.
    - bidichk                       #| bidichk: Checks for dangerous unicode character sequences. [fast]  --  Checks for dangerous unicode character sequences. - Super rare but why not to be a bit paranoid?
    - copyloopvar                   #| copyloopvar: Copyloopvar is a linter detects places where loop variables are copied. [fast]  --  after go 1.22 don't need copy var at for range.
    - decorder                      #| decorder: Check declaration order and count of types, constants, variables and functions. [fast]  --  Check declaration order of types, consts, vars and funcs. - order of declarations
    - depguard                      #| depguard: Go linter that checks if package imports are in a list of acceptable packages. [fast]  --  Checks if package imports are in a list of acceptable packages.
    - dogsled                       #| dogsled: Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()). [fast]  --  Checks assignments with too many blank identifiers. Very rare.
    - dupl                          #| dupl: Tool for code clone detection. [fast]  --  Tool for code clone detection. - check for duplicates with at least 100 chars (can be changed via config)
    - dupword                       #| dupword: Checks for duplicate words in the source code. [fast, auto-fix]  --  Find duplicate words, rare.
    - forcetypeassert               #| forcetypeassert: Finds forced type assertions. [fast]  --  Finds forced type assertions, very good for juniors.
    - gocheckcompilerdirectives     #| gocheckcompilerdirectives: Checks that go compiler directive comments (//go:) are valid. [fast]  --  Checks that compiler directive comments (//go:) are valid. Rare.
    - gochecknoinits                #| gochecknoinits: Checks that no init functions are present in Go code. [fast]  --  Globals and init() are no ok, because this linter use on golangci lint.
    - goconst                       #| goconst: Finds repeated strings that could be replaced by a constant. [fast]  --  check for multiple used strings with could be replaced by a const
    - goheader                      #| goheader: Checks if file header matches to pattern. [fast, auto-fix]  --  I don't use file headers.
    - gomoddirectives               #| gomoddirectives: Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod. [fast]  --  Allow or ban replace directives in go.mod or force explanation for retract directives.
    - gomodguard                    #| gomodguard: Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast]  --  Allowed/blocked packages to import. I prefer to do it manually.
    - goprintffuncname              #| goprintffuncname: Checks that printf-like functions are named with `f` at the end. [fast]  --  Printf-like functions must have -f.
    - grouper                       #| grouper: Analyze expression groups. [fast]  --  Groupt declarations, I prefer manually.
    - inamedparam                   #| inamedparam: Reports interfaces with unnamed method parameters. [fast]
    - interfacebloat                #| interfacebloat: A linter that checks the number of methods inside an interface. [fast]  --  Forces tiny interfaces, very subjective.
    - maintidx                      #| maintidx: Maintidx measures the maintainability index of each function. [fast]  --  Maintainability index of each function, subjective.
    - misspell                      #| misspell: Finds commonly misspelled English words. [fast, auto-fix]  --  Fix all the misspells, amazing thing.
    - nakedret                      #| nakedret: Checks that functions with naked returns are not longer than a maximum size (can be zero). [fast, auto-fix]  --  Finds naked/bare returns and requires change them.
    - nlreturn                      #| nlreturn: Nlreturn checks for a new line before return and branch statements to increase code clarity. [fast, auto-fix]  --  Forces newlines in some places. -  wsl linter what implements the same checks?
    - nolintlint                    #| nolintlint: Reports ill-formed or insufficient nolint directives. [fast, auto-fix]  --  Forces comment why another check is disabled.-  Better not to have //nolint: at all ;)
    - nosprintfhostport             #| nosprintfhostport: Checks for misuse of Sprintf to construct a host with port in a URL. [fast]  --  Finds misuse of Sprintf with host:port in a URL. Cool but rare.
    - perfsprint                    #| perfsprint: Checks that fmt.Sprintf can be replaced with a faster alternative. [auto-fix]  --  aiming at usages of fmt.Sprintf which have faster alternatives.
    - prealloc                      #| prealloc: Finds slice declarations that could potentially be pre-allocated. [fast]  --  Finds slices that could potentially be pre-allocated. Small performance win + cleaner code.
    - predeclared                   #| predeclared: Find code that shadows one of Go's predeclared identifiers. [fast]  --  check that definitions (vars, functions, ...) do not use predeclared names like int, string, copy, print, ... - Finds shadowing of Go's predeclared identifiers.
    - promlinter                    #| promlinter: Check Prometheus metrics naming via promlint. [fast]  --  Lint your Prometheus metrics name.
    - testableexamples              #| testableexamples: Linter checks if examples are testable (have an expected output). [fast]  --  Test-related checks. - good.
    - testpackage                   #| testpackage: Linter that makes you use a separate _test package. [fast]  --  Often non-`_test` package is ok.
    - usestdlibvars                 #| usestdlibvars: A linter that detect the possibility to use variables/constants from the Go standard library. [fast, auto-fix]  --  Detect the possibility to use variables/constants from stdlib.
    - wsl                           #| wsl: Add or remove empty lines. [fast, auto-fix]  -- Forces you to use empty lines. Great if configured correctly.

#, Not explicitly identified as 'fast'
    - asasalint                     #| asasalint: Check for pass []any as any in variadic func(...any).  --  Check for pass []any as any in variadic func(...any).
    - bodyclose                     #| bodyclose: Checks whether HTTP response body is closed successfully.  --  Checks whether HTTP response body is closed successfully.  - check for unclosed bodies of http requests (does not work in very complex scenarios)
    - canonicalheader               #| canonicalheader: Canonicalheader checks whether net/http.Header uses canonical header. [auto-fix]
    - containedctx                  #| containedctx: Containedctx is a linter that detects struct contained context.Context field.  --  Detects struct contained context.Context field. Not a problem.
    - contextcheck                  #| contextcheck: Check whether the function uses a non-inherited context.  --  Check whether the function uses a non-inherited context.
    - durationcheck                 #| durationcheck: Check for two durations multiplied together.  --  Check for two durations multiplied together. - check for 2 durations which are multiplied by accident
    - err113                        #| err113: Go linter to check the errors handling expressions. [auto-fix]  --  Check the error handling expressions. Too noisy.
    - errchkjson                    #| errchkjson: Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.  --  I'm fine to check the error from json.Marshal Â¯\_(ãƒ„)_/Â¯
    - errname                       #| errname: Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.  --  Checks `Err-` prefix for var and `-Error` suffix for error type.
    - errorlint                     #| errorlint: Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13. [auto-fix]  --  Suggests to use `%w` for error-wrapping.
    - exhaustive                    #| exhaustive: Check exhaustiveness of enum switch statements.  --  Forces to handle more cases. Cool but noisy.
    - exhaustruct                   #| exhaustruct: Checks if all structure fields are initialized.
    - exptostd                      #| exptostd: Detects functions from golang.org/x/exp/ that can be replaced by std functions. [auto-fix]
    - fatcontext                    #| fatcontext: Detects nested contexts in loops and function literals. [auto-fix]
    - ginkgolinter                  #| ginkgolinter: Enforces standards of using ginkgo and gomega. [auto-fix]  --  I'm not a fan of ginkgo and gomega packages.
    - gochecknoglobals              #| gochecknoglobals: Check that no global variables exist.
    - gochecksumtype                #| gochecksumtype: Run exhaustiveness checks on Go "sum types".
    - gosec                         #| gosec: Inspects source code for security problems.  --  Powerful security-oriented linter. But requires some time to configure it properly, see https://github.com/securego/gosec#available-rules
    - gosmopolitan                  #| gosmopolitan: Report certain i18n/l10n anti-patterns in your Go codebase.
    - iface                         #| iface: Detect the incorrect use of interfaces, helping developers avoid interface pollution. [auto-fix]
    - importas                      #| importas: Enforces consistent import aliases. [auto-fix]  --  Checks imports aliases, rare. - may be useful later, requires configuration
    - intrange                      #| intrange: Intrange is a linter to find places where for loops could make use of an integer range. [auto-fix]  --  a linter to find places where for loops could make use of an integer range. [auto-fix] - range over int, work after go 1.22
    - ireturn                       #| ireturn: Accept Interfaces, Return Concrete Types.  --  Accept interfaces, return types. Not always.
    - loggercheck                   #| loggercheck: Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).  --  Some log checkers, might be useful.
    - makezero                      #| makezero: Finds slice declarations with non-zero initial length.  --  Slice declarations with non-zero initial length. Not my case.
    - mirror                        #| mirror: Reports wrong mirror patterns of bytes/strings usage. [auto-fix]  --  Reports wrong mirror patterns of bytes/strings usage.
    - musttag                       #| musttag: Enforce field tags in (un)marshaled structs.  --  Enforce tags in un/marshaled structs. Cool but not my case.
    - nilerr                        #| nilerr: Finds the code that returns nil even if it checks that the error is not nil.  --  check if function returns nil although a checked error is not nil
    - nilnesserr                    #| nilnesserr: This linter reports that it checks for err != nil, but it returns a different nil value error.
    - nilnil                        #| nilnil: Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx                         #| noctx: Finds sending http request without context.Context.  --  Finds sending HTTP request without context.Context.
    - paralleltest                  #| paralleltest: Detects missing usage of t.Parallel() method in your Go test.  --  I don't use t.Parallel() that much.
    - protogetter                   #| protogetter: Reports direct reads from proto message fields when getters should be used. [auto-fix]
    - reassign                      #| reassign: Checks that package variables are not reassigned.  --  Checks that package variables are not reassigned. - Super rare case but can catch bad things (like `io.EOF = nil`)
    - recvcheck                     #| recvcheck: Checks for receiver type consistency.
    - rowserrcheck                  #| rowserrcheck: Checks whether Rows.Err of rows is checked successfully.
    - sloglint                      #| sloglint: Ensure consistent code style when using log/slog.  --  Ensure consistent code style when using log/slog.
    - spancheck                     #| spancheck: Checks for mistakes with OpenTelemetry/Census spans.
    - sqlclosecheck                 #| sqlclosecheck: Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.  --  Somewhat similar to `bodyclose` but for `database/sql` package.
    - stylecheck                    #| stylecheck: Stylecheck is a replacement for golint. [auto-fix]  --  Is a replacement for `golint`, similar to `revive`.
    - tagliatelle                   #| tagliatelle: Checks the struct tags.
    - tenv                          #| tenv: Tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17.  --  Test-related checks. - good.
    - testifylint                   #| testifylint: Checks usage of github.com/stretchr/testify. [auto-fix]  --  Test-related checks. - good.
    - thelper                       #| thelper: Thelper detects tests helpers which is not start with t.Helper() method.  --  Test-related checks. - good.
    - tparallel                     #| tparallel: Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.  --  Test-related checks. - good.
    - unconvert                     #| unconvert: Remove unnecessary type conversions.  --  Remove unnecessary type conversions, make code cleaner
    - unparam                       #| unparam: Reports unused function parameters.  --  check (well... it tries) to find unused func params or returns - Might be noisy but better to know what is unused
    - usetesting                    #| usetesting: Reports uses of functions with replacement inside the testing package. [auto-fix]
    - wastedassign                  #| wastedassign: Finds wasted assignment statements.  --  Finds wasted assignment statements.
    - wrapcheck                     #| wrapcheck: Checks that errors returned from external packages are wrapped.  --  Don't find it useful to wrap all errors from external packages.
    - zerologlint                   #| zerologlint: Detects the wrong usage of `zerolog` that a user forgets to dispatch with `Send` or `Msg`.



#% Purely for TESTS - See below [exclude: exclude-rules: - path-except:]
#. Only run on '*_test.go' files
    - forbidigo                     #| forbidigo: Forbids identifiers.  --   Eliminate leftover Println debugging - forbidden by pattern `^(fmt\.Print(|f|ln)|print|println)$`


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          Linters Disabled
  disable:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#= https://golangci-lint.run/usage/linters/#disabled-by-default
#   disable-all: true

#* Add extra tab from margin when you degrade these guys...

#& -- My discretion begins..
#. --- Subcomponents listed here as reminders for future consideration. ---
# . revive -  flag-parameter
# . revive -  comment-spacings
# . revive -  add-constant
# . revive -  empty-lines
# . revive -  unhandled-error

#% -- Potentially Temporary
        - godox                         #| godox: Tool for detection of FIXME, TODO and other comment keywords. [fast]
        - gocritic                      #| gocritic: Provides diagnostics that check for bugs, performance and style issues. [auto-fix]  --  Dislikes 'commentedOutCode' ?
        - nonamedreturns                #| nonamedreturns: Reports all named returns.  --  Reports all named returns, not that bad. = https://github.com/firefart/nonamedreturns - @odds w/ revive's "confusing-naming"

#% -- Probably permanent
        - nestif                        #| nestif: Reports deeply nested if statements. [fast]  --  Deeply(?) nested if statements, subjective.
        - varnamelen                    #| varnamelen: Checks that the length of a variable's name matches its scope.  -- Doesn't seem to like single letter vars; no matter how tiny the scope, or applicable.
        - mnd                           #| mnd: An analyzer to detect magic numbers. [fast] -- consts where they might not ought to be?  -- noisy
        - godot                         #| godot: Check if comments end in a period. [fast, auto-fix] -- comment punctuation, really? And no, comments are not poetry.. ;o)
        - lll                           #| lll: Reports long lines. [fast]  --  disabled in favor of revive - check max line length.
        - whitespace                    #| whitespace: Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc. [fast, auto-fix]  --  wsl, gofmt, & gofumpt covers that (from what I know).

#& -- My discretion ends (so far..)

#% Deprecated AND Disabled - walk of shame
        - funlen                        #| funlen: Checks for long functions. [fast]  --  disabled in favor of revive - check for too long functions (default: 60 lines or 40 statements) - I might have long but a simple function?
        - cyclop                        #| cyclop: Checks function and package cyclomatic complexity. [fast]  --  disabled in favor of revive - Checks function and package cyclomatic complexity. Prob if I have a long but trivial switch-case?  -- Cyclomatic complexity is a measurement, not a goal. #= (c) Bryan C. Mills / https://github.com/bcmills
        - gocyclo                       #| gocyclo: Computes and checks the cyclomatic complexity of functions. [fast]  --  disabled in favor of revive
        - gocognit                      #| gocognit: Computes and checks the cognitive complexity of functions. [fast]  --  disabled in favor of revive - check for functions with too high cognitive complexity - Same as `cyclop` linter (see above)
                                            #    = https://tomasvotruba.com/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/
                                            #    = https://blog.sonarsource.com/cognitive-complexity-because-testability-understandability
                                            #    = https://www.sonarsource.com/docs/CognitiveComplexity.pdf

#, Deprecated to the point even 'disabling' them makes the linter cry..
        # - deadcode                          #. deprecated 1.49  --  deadcode [deprecated]: Deprecated. [fast]
        # - execinquery                       #. deprecated  --  All SQL queries MUST BE covered with tests.  --  execinquery [deprecated]: Deprecated. [fast]
        # - exhaustivestruct                  #. deprecated  --  exhaustivestruct [deprecated]: Deprecated. [fast]
        # - exportloopref                     #. deprecated for copyloopvar  --  exportloopref [deprecated]: Checks for pointers to enclosing loop variables.
        # - golint                            #. deprecated  --  golint [deprecated]: Deprecated. [fast]
        # - gomnd                             #. deprecated - replaced w/ mnd - check magic numbers  --  gomnd [deprecated]: Deprecated. [fast]
        # - ifshort                           #. deprecated in 1.48  --  ifshort [deprecated]: Deprecated. [fast]
        # - interfacer                        #. deprecated  --  interfacer [deprecated]: Deprecated. [fast]
        # - maligned                          #. deprecated  --  maligned [deprecated]: Deprecated. [fast]
        # - nosnakecase                       #. deprecated 1.48  --  nosnakecase [deprecated]: Deprecated. [fast]
        # - scopelint                         #. obsoleted, replaced by other linters  --  scopelint [deprecated]: Deprecated. [fast]
        # - structcheck                       #. deprecated 1.49  --  structcheck [deprecated]: Deprecated. [fast]
        # - varcheck                          #. deprecated 1.49  --  varcheck [deprecated]: Deprecated. [fast]

#,-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#%      Linter - Presets
#,-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#. - bugs: asasalint, asciicheck, bidichk, bodyclose, contextcheck, durationcheck, errcheck, errchkjson, errorlint, exhaustive, gocheckcompilerdirectives, gochecksumtype, gosec, gosmopolitan, govet, loggercheck, makezero, musttag, nilerr, nilnesserr, noctx, protogetter, reassign, recvcheck, rowserrcheck, spancheck, sqlclosecheck, staticcheck, testifylint, zerologlint
#. - comment: dupword, godot, godox, misspell
#. - complexity: cyclop, funlen, gocognit, gocyclo, maintidx, nestif
#. - error: err113, errcheck, errorlint, wrapcheck
#. - format: gci, gofmt, gofumpt, goimports
#. - import: depguard, gci, goimports, gomodguard
#. - metalinter: gocritic, govet, revive, staticcheck
#. - module: depguard, gomoddirectives, gomodguard
#. - performance: bodyclose, fatcontext, noctx, perfsprint, prealloc
#. - sql: rowserrcheck, sqlclosecheck
#. - style: asciicheck, canonicalheader, containedctx, copyloopvar, decorder, depguard, dogsled, dupl, err113, errname, exhaustruct, exptostd, forbidigo, forcetypeassert, ginkgolinter, gochecknoglobals, gochecknoinits, goconst, gocritic, godot, godox, goheader, gomoddirectives, gomodguard, goprintffuncname, gosimple, grouper, iface, importas, inamedparam, interfacebloat, intrange, ireturn, lll, loggercheck, makezero, mirror, misspell, mnd, musttag, nakedret, nilnil, nlreturn, nolintlint, nonamedreturns, nosprintfhostport, paralleltest, predeclared, promlinter, revive, sloglint, stylecheck, tagalign, tagliatelle, testpackage, tparallel, unconvert, usestdlibvars, varnamelen, wastedassign, whitespace, wrapcheck, wsl
#. - test: exhaustruct, paralleltest, tenv, testableexamples, testifylint, testpackage, thelper, tparallel, usetesting
#. - unused: ineffassign, unparam, unused

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          Linters Settings/Configuration
linters-settings:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#  ? Unverified settings..
  gofmt:
    simplify: true
  gocyclo:
    min-complexity: 15
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 2
  misspell:
    locale: US
  lll:
    line-length: 160
    tab-width: 1
  unparam:
    check-exported: false
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  wsl: #| wsl: Add or remove empty lines. [fast, auto-fix]  -- Forces you to use empty lines. Great if configured correctly.
      force-case-trailing-whitespace: 1
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  decorder:
      dec-order:
          - type
          - const
          - var
          - func
      disable-dec-order-check: false
      disable-init-func-first-check: false
      disable-dec-num-check: false
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  goimports: #| goimports: Checks if the code and import statements are formatted according to the 'goimports' command. [fast, auto-fix]
    local-prefixes: github.com/spf13/viper  # example
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  depguard:         #. depguard - Checks if package imports are in a list of acceptable packages.
    rules:
      main:
        list-mode: lax
        files:
          - $all
        allow:
          - $gostd  # example
          # - github.com/alingse/nilnesserr  # example
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#& GCI splits all import blocks into different sections, now support six section type:
#= https://github.com/daixiang0/gci
# standard: Go official imports, like "fmt"
# custom: Custom section, use full and the longest match (match full string first, if multiple matches, use the longest one)
# default: All rest import blocks
# blank: Put blank imports together in a separate group
# dot: Put dot imports together in a separate group
# alias: Put alias imports together in a separate group
# localmodule: Put imports from local packages in a separate group
# The priority is standard > default > custom > blank > dot > alias > localmodule, all sections sort alphabetically inside.
# By default, blank, dot, and alias sections are not used, and the corresponding lines end up in the other groups.
# All import blocks use one TAB(\t) as Indent.

  gci: #| gci: Checks if code and import statements are formatted, it makes import statements always deterministic. [fast, auto-fix]  --  Imports order.
    sections:
      - standard
      - default
      - localmodule
#     - prefix(github.com/spf13/viper)  # example
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  staticcheck: #, staticcheck: It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint. [auto-fix]  --  I have found that it's not the same as staticcheck binary :\
               #= https://golangci-lint.run/usage/linters/#staticcheck  --  https://staticcheck.dev/docs/checks/
    checks:
      - all
    #   - '-SA1000' # disable the rule SA1000
    #   - '-SA1004' # disable the rule SA1004
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  gocritic: #| gocritic: Provides diagnostics that check for bugs, performance and style issues. [auto-fix]  --  Dislikes 'commentedOutCode' ?
            #= See https://go-critic.com/overview.html
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    # disabled-checks:
      #. These 3 will detect many cases, but they do sense if it's performance oriented code
    #   - hugeParam
    #   - rangeExprCopy
    #   - rangeValCopy
    #   - wrapperFunc
    #   - dupImport
    #   - ifElseChain
    #   - octalLiteral

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  godot: #| godot: Check if comments end in a period. [fast, auto-fix] -- comment punctuation, really? And no, comments are not poetry.. ;o)
    scope: all
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  errcheck: #, errcheck: Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.  --  Forces to not skip error check. - check that all errors are handled
    check-type-assertions: true #. Report `a := b.(MyStruct)` when `a, ok := ...` should be. - Default: false
    check-blank: true           #. Report skipped checks:`num, _ := strconv.Atoi(numStr)`. - Default: false
    # exclude-functions:          #. Functions to skip.
    #   - io/ioutil.ReadFile
    #   - io.Copy(*bytes.Buffer)
    #   - io.Copy(os.Stdout)
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 #= https://github.com/alexkohler/nakedret
  nakedret:             #& aims to catch naked returns on non-trivial functions.
    max-func-lines: 25   #. Default: 30 - number of lines before insisting returned values are explicit on return line
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  govet: #, govet: Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [auto-fix]  --  check incorrect printf format-argument calls - invoked by the goland internally?
    disable-all: false # Disable all analyzers. - Default: false
    # Enable analyzers by name. (in addition to default: appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas, framepointer, httpresponse, ifaceassert,
    #   loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog, stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr, unusedresult).
    # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers. - Default: []
    enable:
      - appends                 #. Check for missing values after append.
      - asmdecl                 #. Report mismatches between assembly files and Go declarations.
      - assign                  #. Check for useless assignments.
      - atomic                  #. Check for common mistakes using the sync/atomic package.
      - atomicalign             #. Check for non-64-bits-aligned arguments to sync/atomic functions.
      - bools                   #. Check for common mistakes involving boolean operators.
      - buildtag                #. Check //go:build and // +build directives.
      - cgocall                 #. Detect some violations of the cgo pointer passing rules.
      - composites              #. Check for unkeyed composite literals.
      - copylocks               #. Check for locks erroneously passed by value.
      - deepequalerrors         #. Check for calls of reflect.DeepEqual on error values.
      - defers                  #. Report common mistakes in defer statements.
      - directive               #. Check Go toolchain directives such as //go:debug.
      - errorsas                #. Report passing non-pointer or non-error values to errors.As.
      - findcall                #. Find calls to a particular function.
      - framepointer            #. Report assembly that clobbers the frame pointer before saving it.
      - httpresponse            #. Check for mistakes using HTTP responses.
      - ifaceassert             #. Detect impossible interface-to-interface type assertions.
      - loopclosure             #. Check references to loop variables from within nested functions.
      - lostcancel              #. Check cancel func returned by context.WithCancel is called.
      - nilfunc                 #. Check for useless comparisons between functions and nil.
      - nilness                 #. Check for redundant or impossible nil comparisons.
      - printf                  #. Check consistency of Printf format strings and arguments.
      - reflectvaluecompare     #. Check for comparing reflect.Value values with == or reflect.DeepEqual.
      - shadow                  #. Check for possible unintended shadowing of variables.
      - shift                   #. Check for shifts that equal or exceed the width of the integer.
      - sigchanyzer             #. Check for unbuffered channel of os.Signal.
      - slog                    #. Check for invalid structured logging calls.
      - sortslice               #. Check the argument type of sort.Slice.
      - stdmethods              #. Check signature of methods of well-known interfaces.
      - stdversion              #. Check for uses of too-new standard library symbols.
      - stringintconv           #. Check for string(int) conversions.
      - structtag               #. Check that struct field tags conform to reflect.StructTag.Get.
      - testinggoroutine        #. Report calls to (*testing.T).Fatal from goroutines started by a test.
      - tests                   #. Check for common mistaken usages of tests and examples.
      - timeformat              #. Check for calls of (time.Time).Format or time.Parse with 2006-02-01.
      - unmarshal               #. Report passing non-pointer or non-interface values to unmarshal.
      - unreachable             #. Check for unreachable code.
      - unsafeptr               #. Check for invalid conversions of uintptr to unsafe.Pointer.
      - unusedresult            #. Check for unused results of calls to some functions.
      - unusedwrite             #. Checks for unused writes.
      - waitgroup               #. Checks for misuses of sync.WaitGroup.

    enable-all: false # Enable all analyzers. - Default: false

    #& Disable analyzers by name.
    # (in addition to default: atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice, timeformat, unusedwrite).
    # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
    # Default: []
    disable:
      - fieldalignment          #. Find structs that would use less memory if their fields were sorted. - I can waste waste a few bytes?  Whoever wrote this either works on embedded cerebro-cellular space nano-implants or has no friends.. or both.

    settings: # Settings per analyzer.
      #, Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        #. Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`). -  Default: []
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
      shadow:
        strict: false #. Whether to be strict about shadowing; can be noisy. - Default: false - Should allow for exceptions when shadowing 'err'?
    #   unusedresult:
    #     #. Comma-separated list of functions whose results must be used - Default: []
    #     # (in addition to default: context.WithCancel, context.WithDeadline, context.WithTimeout, context.WithValue, errors.New, fmt.Errorf, fmt.Sprint, fmt.Sprintf, sort.Reverse).
    #     funcs:
    #       - pkg.MyFunc
    #     stringmethods: # Comma-separated list of names of methods of type func() string whose results must be used (in addition to default Error,String) - Default: []
    #       - MyMethod
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  tagalign: #| tagalign: Check that struct tags are well aligned. [fast, auto-fix] - and ordered - see linters-settings  -- check struct tag alignment and order
      align: true
      sort: true
      order:
          - json
          - validate
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#= https://github.com/ldez/tagliatelle
  tagliatelle:  #| tagliatelle: Checks the struct tags name case.
    case:
      #& Defines the association between tag name and case. - Any struct tag name can be used.
      #. Supported string cases: camel, pascal, kebab, snake, upperSnake, goCamel, goPascal, goKebab, goSnake, upper, lower, header
      rules:
        json: snake # Default: camel
        yaml: snake # Default: camel
        xml: camel # Default: camel
        bson: camel # Default: camel
        avro: snake # Default: snake
        mapstructure: kebab
        toml: camel # Default: camel
        env: upperSnake # Default: upperSnake
        envconfig: upperSnake # Default: upperSnake
        whatever: snake # Default: snake
        header: header # Default: header

      #. Important: the `extended-rules` overrides `rules`. (Also Defines the association between tag name and case.) - Default: empty
    #   extended-rules:
    #     json:
    #       case: camel # Required
        #   extra-initialisms: true # Adds 'AMQP', 'DB', 'GID', 'RTP', 'SIP', 'TS' to initialisms, and removes 'LHS', 'RHS' from initialisms. - Default: false
        #   initialism-overrides: # Defines initialism additions and overrides. - Default: empty
        #     DB: true # add a new initialism
        #     LHS: false # disable a default initialism.

    #   use-field-name: false # Uses the struct field name to check the name of the struct tag. - Default: false
    #   ignored-fields: # The field names to ignore. - Default: []
    #     - Bar
    #     - Foo
    #   overrides: # Overrides the default/root configuration. - Default: []
    #     -
        #   pkg: foo/bar # The package path (uses `/` only as a separator). - Required
        #   rules: # Default: empty or the same as the default/root configuration.
        #     json: snake
        #     xml: pascal
        #   extended-rules: # Default: empty or the same as the default/root configuration. - same options as the base `extended-rules`.
        #   use-field-name: false # Default: false (WARNING: it doesn't follow the default/root configuration)
        #   ignored-fields: # The field names to ignore. - Default: [] or the same as the default/root configuration.
        #     - Bar
        #     - Foo
        #   ignore: false # Ignore the package (takes precedence over all other configurations). - Default: false

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          Revive - Linter Settings
  revive: #| revive: Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [auto-fix] - HUGE CONFIG BENEATH linters-settings
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    max-open-files: 2048                #. Maximum number of open files at the same time. - Defaults to unlimited.
                                            #= See https://github.com/mgechev/revive#command-line-flags
    ignore-generated-header: true       #. If false, ignores files with "GENERATED" header, similar to golint. - Default: false
                                            #= See https://github.com/mgechev/revive#available-rules for details.
    severity: error                     #. Sets the default severity. - Default: warning
                                            #= See https://github.com/mgechev/revive#configuration
    enable-all-rules: true              #. Enable all available rules. - Default: false
    confidence: 0.1                     #. Default failure confidence. [0.8*] = linting errors with < 0.8 confidence ignored.

    rules:
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#add-constant
      - name: add-constant
        severity: warning
        disabled: true          #* Changed - Wants vars where numbers are the ideal (IMO) ie: Playing Card count
        arguments:              #* limit test for cards [i <= 52] - I'll rewrite when 52 changes..
          - maxLitCount: "3"
            allowStrs: '""'
            allowInts: "0,1,2"
            allowFloats: "0.0,0.,1.0,1.,2.0,2."
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#argument-limit
      - name: argument-limit
        severity: warning
        disabled: false          #* Changed - Not sure of the default, certainly less is more,
        arguments: [7]      # 6  #* and '2' would probably be an 'ideal'?
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#atomic
      - name: atomic
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#banned-characters
      - name: banned-characters
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bare-return
      - name: bare-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#blank-imports
      - name: blank-imports
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#bool-literal-in-expr
      - name: bool-literal-in-expr
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#call-to-gc
      - name: call-to-gc
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#cognitive-complexity
      - name: cognitive-complexity
        severity: warning
        disabled: false           #* Changed - I can cognit reel gud
        arguments: [20]      # 20 - was 7
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#comment-spacings
      - name: comment-spacings
        severity: warning         #* Changed - My comment coloring relies on comment delimiter
        disabled: true            #* suffixes. (Awkward in appearance with space in betwixt.)
        arguments: [ "nolint" ]   # added
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#confusing-naming
      - name: confusing-naming
        severity: warning           #? Under consideration
        disabled: false             #? Right now 'nonamedreturns' is disabled to allow this?
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#confusing-results
      - name: confusing-results
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#constant-logical-expr
      - name: constant-logical-expr
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-as-argument
      - name: context-as-argument
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#context-keys-type
      - name: context-keys-type
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#cyclomatic
      - name: cyclomatic
        severity: warning
        disabled: false           #* Changed - What's genuinely best?  War on complexity vs good judgment?
        arguments: [20]          # was 3         Only as complicated as it has to be..
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#datarace
      - name: datarace
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#deep-exit
      - name: deep-exit
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#defer
      - name: defer
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#dot-imports
      - name: dot-imports
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#duplicated-imports
      - name: duplicated-imports
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#early-return
      - name: early-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#empty-block
      - name: empty-block
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#empty-lines
      - name: empty-lines
        severity: warning       #* Changed - Some times you just need space..
        disabled: true
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#enforce-map-style
      - name: enforce-map-style
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-naming
      - name: error-naming
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-return
      - name: error-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#function-length
      - name: function-length
        severity: warning
        disabled: false             #* Changed - 10?!
        arguments: [40, 0]   #  [10, 0]
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#error-strings
      - name: error-strings
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#errorf
      - name: errorf
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#exported
      - name: exported
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#file-header
      - name: file-header
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#flag-parameter
      - name: flag-parameter
        severity: warning           #* Changed - TEMP?  I use flags while developing to turn logging on/off
        disabled: true              #* (ie: yorn) in funcs - that won't make production. Better way?
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#function-result-limit
      - name: function-result-limit
        severity: warning
        disabled: false             #* Changed - I understand this limit, but I am weak..
        arguments: [5]  # 2
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#get-return
      - name: get-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#identical-branches
      - name: identical-branches
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#if-return
      - name: if-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#increment-decrement
      - name: increment-decrement
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#indent-error-flow
      - name: indent-error-flow
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#import-alias-naming
      - name: import-alias-naming
        severity: warning
        disabled: false
        arguments:
          - "^[a-z][a-z0-9]{0,}$"
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#imports-blocklist
      - name: imports-blocklist
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#import-shadowing
      - name: import-shadowing
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#line-length-limit
      - name: line-length-limit
        severity: warning
        disabled: true          #* Changed - me gotem big ol picta box
        arguments: [110]       # 80
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#max-public-structs
      - name: max-public-structs
        severity: warning
        disabled: false
        arguments: [3]
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#modifies-parameter
      - name: modifies-parameter
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#modifies-value-receiver
      - name: modifies-value-receiver
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#nested-structs
      - name: nested-structs
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#optimize-operands-order
      - name: optimize-operands-order
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#package-comments
      - name: package-comments
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range
      - name: range
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-in-closure
      - name: range-val-in-closure
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#range-val-address
      - name: range-val-address
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#receiver-naming
      - name: receiver-naming
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#redundant-import-alias
      - name: redundant-import-alias
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#redefines-builtin-id
      - name: redefines-builtin-id
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-of-int
      - name: string-of-int
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#string-format
      - name: string-format
        severity: warning
        disabled: false
        arguments:
          - - 'core.WriteError[1].Message'
            - '/^([^A-Z]|$)/'
            - must not start with a capital letter
          - - 'fmt.Errorf[0]'
            - '/(^|[^\.!?])$/'
            - must not end in punctuation
          - - panic
            - '/^[^\n]*$/'
            - must not contain line breaks
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#struct-tag
      - name: struct-tag
        arguments:
          - "json,inline"
          - "bson,outline,gnu"
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#superfluous-else
      - name: superfluous-else
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-equal
      - name: time-equal
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#time-naming
      - name: time-naming
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-naming
      - name: var-naming
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#var-declaration
      - name: var-declaration
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unconditional-recursion
      - name: unconditional-recursion
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-naming
      - name: unexported-naming
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-return
      - name: unexported-return
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unhandled-error
      - name: unhandled-error
        severity: warning       #* Changed - Maybe when I'm better, or..
        disabled: true          #? Perhaps needs proper exclusions list -fmt.Println/fmt.Print ??
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unnecessary-stmt
      - name: unnecessary-stmt
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unreachable-code
      - name: unreachable-code
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-parameter
      - name: unused-parameter
        severity: warning
        disabled: false
        arguments:
          - allowRegex: "^_"
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-receiver
      - name: unused-receiver
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#useless-break
      - name: useless-break
        severity: warning
        disabled: false
      #= https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#waitgroup-by-value
      - name: waitgroup-by-value
        severity: warning
        disabled: false

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
#&          Issues
issues:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  #% List of regexps of issue texts to exclude.
  #. But independently of this option we use default exclude patterns, it can be disabled by `exclude-use-default: false`.
  #~ To list all excluded by default patterns execute `golangci-lint run --help`
  #, Excluding configuration per-path, per-linter, per-text and per-source
  exclude:              #. all the reports that contains the text defined herein are excluded:
    # - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    # - "exported (type|method|function) (.+) should have comment or be unexported"
    # - "ST1000: at least one file in a package should have a package comment"
    - "File is not properly formatted" #? gofmt, gofumpt, goimports, gci - All complained, no cause found, auto-fixes temporary [if effective - returns on edit.] Suspect Line endings or similar (lf vs crlf?)

  exclude-rules:    #. Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    #. Exclusive for TESTS: Run some linter only for test files by excluding its issues for everything else.
    - path-except: _test\.go
      linters:
        - forbidigo     #, Eliminate leftover Println debugging - forbidden by pattern `^(fmt\.Print(|f|ln)|print|println)$`


    #. Exclude known linters from partially hard-vendored code, which is impossible to exclude via `nolint` comments.
    #| `/` will be replaced by current OS file path separator to properly work on Windows.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    #. Exclude some `staticcheck` messages.
    - linters:
        - staticcheck       #= https://golangci-lint.run/usage/linters/#staticcheck
      text: "SA9003:"       #. Empty body in an if or else branch.  https://staticcheck.dev/docs/checks/#SA9003

    #. Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "

  exclude-case-sensitive: false         #. If set to true, `exclude` and `exclude-rules` regular expressions become case-sensitive. - Default: false

  #. Which dirs to exclude: issues from them won't be reported. - Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).
  #~ Can use regexp here: `generated.*`, regexp is applied on full path, including the path prefix if one is set.
  #| "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  exclude-dirs:
    - src/external_libs
    - autogenerated_by_my_lib
    - _notes

  #. Enables exclude of directories: vendor$, third_party$, testdata$, examples$, Godeps$, builtin$ - Default: true
  exclude-dirs-use-default: true

  #. Which files to exclude: they will be analyzed, but issues from them won't be reported.
  #. There is no need to include all autogenerated files, we confidently recognize autogenerated files.
  #| "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []

  exclude-files:
    - ".*\\_notes\\.*$"     #. ANY files in _notes dir
    - ".*\\_notes\\.go$"    #. .go files in _notes dir
    - ".*\\\\..*$"          #? dotfiles in project root  [careful - foobar it to useless..]
    - ".*\\_.*$"            #. underscore prefixed files in project root
    - lib/bad.go

  #, Mode of the generated files analysis.
  #
  # - `strict`: sources are excluded by following strictly the Go generated file convention.
  #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
  #    This line must appear before the first non-comment, non-blank text in the file.
  #=    https://go.dev/s/generatedcode
  # - `lax`: sources are excluded if they contain lines `autogenerated file`, `code generated`, `do not edit`, etc.
  # - `disable`: disable the generated files exclusion.
  #
  # Default: lax
  exclude-generated: lax

  #. Maximum issues count per one linter. - I SEE ALL!
  # Set to 0 to disable. - Default: 50
  max-issues-per-linter: 0

  #. Maximum count of issues with the same text. - I SEE ALL!
  # Set to 0 to disable. - Default: 3
  max-same-issues: 0

  #. Make issues output unique by line. - I SEE ALL!
  # Default: true - uniq-by-line: false -- deprecated
  uniq-by-line: false

  #, Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
  #. When set to `true` linter will analyze only new code which are not committed or after some specific revision. This is a cool
  #. feature when you're going to introduce linter into a big project. But I prefer going gradually package by package.
  # Default: false - scan all code. #. - I SEE ALL!
  new: false

#& Git
  #. Show only new issues created after git revision `REV`. -- Default: ""
#   new-from-rev: HEAD

  #. Show only new issues created in git patch with set file path. -- Default: ""
#   new-from-patch: path/to/patch/file

  #. Show issues in any part of update files (requires new-from-rev or new-from-patch). -- Default: false
#   whole-files: true

  #& Fix found issues (if it's supported by the linter). - Default: false  --  Uh, neauoo..
  fix: false

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  #. Independently of option `exclude` we use default exclude patterns, it can be disabled by this option.
  #~ To list all excluded by default patterns execute `golangci-lint run --help`.
  #= Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  # Default: true
  exclude-use-default: false            #, true Not recommended as preceeds modules & bound for deprecation
#       --exclude-use-default            Use or not use default excludes:
#                                          - EXC0001 (errcheck): Almost all programs ignore errors on these functions and in most cases it's ok.
#                                            Pattern: 'Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked'

#                                          - EXC0002 (golint): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: '(comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)'
#                                          - EXC0003 (golint): False positive when tests are defined in package 'test'.
#                                            Pattern: 'func name will be used as test\.Test.* by other packages, and that stutters; consider calling this'

#                                          - EXC0004 (govet): Common false positives.
#                                            Pattern: '(possible misuse of unsafe.Pointer|should have signature)'

#                                          - EXC0005 (staticcheck): Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore.
#                                            Pattern: 'SA4011'

#                                          - EXC0006 (gosec): Too many false-positives on 'unsafe' usage.
#                                            Pattern: 'G103: Use of unsafe calls should be audited'
#                                          - EXC0007 (gosec): Too many false-positives for parametrized shell calls.
#                                            Pattern: 'G204: Subprocess launched with variable'
#                                          - EXC0008 (gosec): Duplicated errcheck checks.
#                                            Pattern: 'G104'
#                                          - EXC0009 (gosec): Too many issues in popular repos.
#                                            Pattern: '(G301|G302|G307): Expect (directory permissions to be 0750|file permissions to be 0600) or less'
#                                          - EXC0010 (gosec): False positive is triggered by 'src, err := ioutil.ReadFile(filename)'.
#                                            Pattern: 'G304: Potential file inclusion via variable'

#                                          - EXC0011 (stylecheck): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: '(ST1000|ST1020|ST1021|ST1022)'

#                                          - EXC0012 (revive): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: 'exported (.+) should have comment( \(or a comment on this block\))? or be unexported'
#                                          - EXC0013 (revive): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: 'package comment should be of the form "(.+)..."'
#                                          - EXC0014 (revive): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: 'comment on exported (.+) should be of the form "(.+)..."'
#                                          - EXC0015 (revive): Annoying issue about not having a comment. The rare codebase has such comments.
#                                            Pattern: 'should have a package comment' (default true)

  #. The list of ids of default excludes to include or disable.
  #= https://golangci-lint.run/usage/false-positives/#default-exclusions
#? This INCLUDES ALL 15 EXCLUSIONS negating 'issues.exclude-use-default=true' was set to true (dirs [third_party$, examples$, Godeps$, builtin$] remain?)
  # Default: []
  include:
    - EXC0001
    - EXC0002
    - EXC0003
    - EXC0004
    - EXC0005
    - EXC0006
    - EXC0007
    - EXC0008
    - EXC0009
    - EXC0010
    - EXC0011
    - EXC0012
    - EXC0013
    - EXC0014
    - EXC0015

#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#&      Output Configuration Options
output:
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  #. Print linter name in the end of issue text. - Must have. Easier to understand the output. - Default: true
  print-linter-name: true

  #. Add a prefix to the output file references. - Flags for post-proc and/or syntax highlighting. - Default: ""
  path-prefix: ""

  #. The formats used to render issues.
  #& - `colored-line-number`, `line-number`, `colored-tab`, `tab`, `json`, `html`
  #. - `checkstyle`, `code-climate`, `junit-xml`, `junit-xml-extended`, `github-actions`, `teamcity`, `sarif`
  #. Output "path" can be either `stdout`, `stderr` or path to the file to write to.
  #
  #. For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  #. The output can be specified for each of them by separating format name and path by colon symbol.
  #~ Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  #. The CLI flag (`--out-format`) override the configuration file.

  #~ Default:
    # formats:
    #   - format: colored-line-number
    #     path: stdout
  #& Unless cli args chg std run outputs ALL CONFIGURED every time.
  #, Noteworthy: The IDE exchange is not affected by this - only the cli..
  formats:
    - format: colored-tab
      path: stdout
    - format: colored-line-number
      path: log\golangci-lint.txt
    - format: tab
      path: log\golangci-lint.csv
    - format: html
      path: log\golangci-lint.html
    - format: json
      path: log\golangci-lint.json

    # - format: json
    #   path: stderr
    # - format: checkstyle
    #   path: report.xml

  sort-results: true        #, Sort Order for final results. Default: false  --  (diff results in line vs table output..)
  sort-order:               #| Possible values: `file`, `linter`, and `severity`. -  Default: ["file"]
    - file                  #. filepath, line, and column.
    - linter                #. like w/ like
    - severity              #. If the severity values are inside the following list, they are ordered thusly: 1. error, 2. warning, 3. high, 4. medium, 5. low - then they are sorted alphabetically.
  print-issued-lines: true  #, Print lines of code with issue. (prints the code in question) - Default: true
  show-stats: true          #, Show statistics per linter. {# of matches} - Default: false

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
